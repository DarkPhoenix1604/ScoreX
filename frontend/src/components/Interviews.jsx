import { useState } from 'react';
import { CalendarIcon, EnvelopeIcon, CheckCircleIcon, XCircleIcon } from '@heroicons/react/24/outline';

export default function Interviews() {
  const [interviews, setInterviews] = useState([
    {
      id: 1,
      candidate: 'John Doe',
      position: 'Senior Software Engineer',
      matchScore: 92,
      status: 'Pending',
      email: 'john.doe@example.com'
    },
    {
      id: 2,
      candidate: 'Jane Smith',
      position: 'Product Manager',
      matchScore: 88,
      status: 'Accepted',
      email: 'jane.smith@example.com'
    }
  ]);

  const handleStatusChange = (id, newStatus) => {
    setInterviews(interviews.map(interview =>
      interview.id === id ? { ...interview, status: newStatus } : interview
    ));
  };

  return (
    <div>
      <div className="sm:flex sm:items-center">
        <div className="sm:flex-auto">
          <h2 className="text-2xl font-semibold text-gray-900">Interview Requests</h2>
          <p className="mt-2 text-sm text-gray-700">
            Manage and track interview requests generated by AI matching
          </p>
        </div>
      </div>

      <div className="mt-8 flow-root">
        <div className="-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
          <div className="inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8">
            <div className="overflow-hidden shadow ring-1 ring-black ring-opacity-5 sm:rounded-lg">
              <table className="min-w-full divide-y divide-gray-300">
                <thead className="bg-gray-50">
                  <tr>
                    <th scope="col" className="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6">
                      Candidate
                    </th>
                    <th scope="col" className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">
                      Position
                    </th>
                    <th scope="col" className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">
                      Match Score
                    </th>
                    <th scope="col" className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">
                      Status
                    </th>
                    <th scope="col" className="relative py-3.5 pl-3 pr-4 sm:pr-6">
                      <span className="sr-only">Actions</span>
                    </th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-gray-200 bg-white">
                  {interviews.map((interview) => (
                    <tr key={interview.id}>
                      <td className="whitespace-nowrap py-4 pl-4 pr-3 text-sm sm:pl-6">
                        <div className="font-medium text-gray-900">{interview.candidate}</div>
                        <div className="text-gray-500">{interview.email}</div>
                      </td>
                      <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                        {interview.position}
                      </td>
                      <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                        <div className="flex items-center">
                          <div className="h-1.5 w-16 rounded-full bg-gray-200">
                            <div
                              className="h-1.5 rounded-full bg-green-500"
                              style={{ width: `${interview.matchScore}%` }}
                            />
                          </div>
                          <span className="ml-2 text-gray-900">{interview.matchScore}%</span>
                        </div>
                      </td>
                      <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                        <span
                          className={`inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium ${
                            interview.status === 'Pending'
                              ? 'bg-yellow-100 text-yellow-800'
                              : interview.status === 'Accepted'
                              ? 'bg-green-100 text-green-800'
                              : 'bg-red-100 text-red-800'
                          }`}
                        >
                          {interview.status}
                        </span>
                      </td>
                      <td className="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6">
                        <div className="flex justify-end space-x-3">
                          <button
                            type="button"
                            className="text-indigo-600 hover:text-indigo-900"
                            onClick={() => {
                              // Handle sending email
                            }}
                          >
                            <EnvelopeIcon className="h-5 w-5" aria-hidden="true" />
                            <span className="sr-only">Send email to {interview.candidate}</span>
                          </button>
                          <button
                            type="button"
                            className="text-indigo-600 hover:text-indigo-900"
                            onClick={() => {
                              // Handle scheduling
                            }}
                          >
                            <CalendarIcon className="h-5 w-5" aria-hidden="true" />
                            <span className="sr-only">Schedule interview with {interview.candidate}</span>
                          </button>
                          {interview.status === 'Pending' && (
                            <>
                              <button
                                type="button"
                                className="text-green-600 hover:text-green-900"
                                onClick={() => handleStatusChange(interview.id, 'Accepted')}
                              >
                                <CheckCircleIcon className="h-5 w-5" aria-hidden="true" />
                                <span className="sr-only">Accept interview request</span>
                              </button>
                              <button
                                type="button"
                                className="text-red-600 hover:text-red-900"
                                onClick={() => handleStatusChange(interview.id, 'Rejected')}
                              >
                                <XCircleIcon className="h-5 w-5" aria-hidden="true" />
                                <span className="sr-only">Reject interview request</span>
                              </button>
                            </>
                          )}
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
} 